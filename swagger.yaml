swagger: "2.0"
info:
  description: "API used by mobile apps"
  version: "1.0.0"
  title: "Kino API"
  termsOfService: "http://trionic.cz/terms/"
  contact:
    email: "dev@trionic.cz"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.trionic.cz"
basePath: "/kino/v1"
tags:
- name: "cinema"
  description: "Cinema operations"
  externalDocs:
    description: "Find out more"
    url: "http://trionic.cz"
- name: "movie"
  description: "Access to movies"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
paths:
  /cinema:
    post:
      tags:
      - "cinema"
      summary: "Add a new cinema"
      description: ""
      operationId: "addCinema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema object that needs to be added to the database"
        required: true
        schema: 
          $ref: "#/definitions/Cinema"
      responses:
        200:
          description: "Data stored"
        401:
          description: "Unauthorized"
        405:
          description: "Invalid input"
      security:
      - kino_auth:
        - "write:cinema"
        - "read:cinema"
    put:
      tags:
      - "cinema"
      summary: "Update an existing cinema"
      description: ""
      operationId: "updateCinema"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Cinema object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Cinema"
      responses:
        200:
          description: "Data updated"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Cinema not found"
        405:
          description: "Validation exception"
      security:
      - kino_auth:
        - "write:cinema"
        - "read:cinema"
  /cinema/findByLocation:
    get:
      tags:
      - "cinema"
      summary: "Find cinemas by location"
      description: "Find all cinemas in circle specified by it's center point coordinates (latitude, longitude) and radius"
      operationId: "findCinemasByLocation"
      produces:
      - "application/json"
      parameters:
      - name: "lat"
        in: "query"
        description: "Latitude of the circle center point"
        required: true
        type: "number"
        format: "float"
        collectionFormat: "multi"
      - name: "lon"
        in: "query"
        description: "Longitude of the circle center point"
        required: true
        type: "number"
        format: "float"
        collectionFormat: "multi"
      - name: "radius"
        in: "query"
        description: "Radius of the circle [km]"
        required: false
        type: "number"
        format: "float"
        default: 25.0
        collectionFormat: "multi"
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Cinema"
        400:
          description: "Invalid coordinates"
        401:
          description: "Unauthorized"
      security:
      - kino_auth:
        - "read:cinema"
  /cinema/{cinemaId}:
    get:
      tags:
      - "cinema"
      summary: "Find cinema by ID"
      description: "Returns a single cinema"
      operationId: "getCinemaById"
      produces:
      - "application/json"
      parameters:
      - name: "cinemaId"
        in: "path"
        description: "ID of cinema to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Cinema"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Cinema not found"
      security:
      - api_key: []
    post:
      tags:
      - "cinema"
      summary: "Updates a cinema with form data"
      description: ""
      operationId: "updateCinemaWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "cinemaId"
        in: "path"
        description: "ID of cinema that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the cinema"
        required: false
        type: "string"
      - name: "address"
        in: "formData"
        description: "Updated address of the cinema"
        required: false
        type: "string"
      - name: "latitude"
        in: "formData"
        description: "Updated latitude coordinate"
        required: false
        type: "number"
        format: "float"
      - name: "longitude"
        in: "formData"
        description: "Updated longitude coordinate"
        required: false
        type: "number"
        format: "float"
      - name: "openingHours"
        in: "formData"
        description: "Updated opening hours of the cinema"
        required: false
        type: "string"        
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
        405:
          description: "Invalid input"
      security:
      - kino_auth:
        - "read:cinema"
        - "write:cinema"
    delete:
      tags:
      - "cinema"
      summary: "Deletes a cinema"
      description: ""
      operationId: "deleteCinema"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "cinemaId"
        in: "path"
        description: "Cinema id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Cinema not found"
      security:
      - kino_auth:
        - "read:cinema"
        - "write:cinema"
  /movie:
    post:
      tags:
      - "movie"
      summary: "Add a new movie"
      description: ""
      operationId: "addMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be added to the database"
        required: true
        schema: 
          $ref: "#/definitions/Movie"
      responses:
        200:
          description: "Data stored"
        401:
          description: "Unauthorized"
        405:
          description: "Invalid input"
      security:
      - kino_auth:
        - "write:movie"
    put:
      tags:
      - "movie"
      summary: "Update an existing movie"
      description: ""
      operationId: "updateMovie"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movie object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Movie"
      responses:
        200:
          description: "Data updated"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Movie not found"
        405:
          description: "Validation exception"
      security:
      - kino_auth:
        - "write:movie"
        - "read:movie"
  /movie/findByTime:
    get:
      tags:
      - "movie"
      summary: "Find movies by time"
      description: "Find N movies with premiere after given time"
      operationId: "findMoviesByTime"
      produces:
      - "application/json"
      parameters:
      - name: "time"
        in: "query"
        description: "Start of time interval"
        required: true
        type: "integer"
        format: "int64"
      - name: "limit"
        in: "query"
        description: "Maximum number of returned movies"
        required: false
        type: "integer"
        format: "int32"
        default: 50
      responses:
        200:
          description: "Success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movie"
        400:
          description: "Invalid time"
        401:
          description: "Unauthorized"
      security:
      - kino_auth:
        - "read:movie"
  /movie/{movieId}:
    get:
      tags:
      - "movie"
      summary: "Find movie by ID"
      description: "Returns a single movie"
      operationId: "getMovieById"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Movie"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Movie not found"
      security:
      - kino_auth:
        - "read:movie"
    post:
      tags:
      - "movie"
      summary: "Updates a movie with form data"
      description: ""
      operationId: "updateMovieWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "movieId"
        in: "path"
        description: "ID of movie that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the cinema"
        required: false
        type: "string"
      - name: "address"
        in: "formData"
        description: "Updated address of the cinema"
        required: false
        type: "string"
      - name: "latitude"
        in: "formData"
        description: "Updated latitude coordinate"
        required: false
        type: "number"
        format: "float"
      - name: "longitude"
        in: "formData"
        description: "Updated longitude coordinate"
        required: false
        type: "number"
        format: "float"
      - name: "openingHours"
        in: "formData"
        description: "Updated opening hours of the cinema"
        required: false
        type: "string"        
      responses:
        200:
          description: "Success"
        401:
          description: "Unauthorized"
        405:
          description: "Invalid input"
      security:
      - kino_auth:
        - "read:movie"
        - "write:movie"
    delete:
      tags:
      - "movie"
      summary: "Deletes a movie"
      description: ""
      operationId: "deleteMovie"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "movieId"
        in: "path"
        description: "Movie id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Success"
        400:
          description: "Invalid ID supplied"
        401:
          description: "Unauthorized"
        404:
          description: "Movie not found"
      security:
      - kino_auth:
        - "write:movie"
  /movie/uploadPoster:
    post:
      tags:
      - "movie"
      summary: "uploads an poster image"
      description: ""
      operationId: "uploadPoster"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - kino_auth:
        - "write:image"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  kino_auth:
    type: "oauth2"
    authorizationUrl: "http://trionic.cz/oauth/dialog"
    flow: "implicit"
    scopes:
      write:cinema: "modify cinema information"
      read:cinema: "read cinema list"
      write:movie: "update movie information"
      read:movie: "read movie list"
      write:image: "upload image"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Image:
    type: "object"
    required:
      - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      dataSize:
        type: "integer"
        format: "int32"
        description: "data size in bytes"
      data:
        type: "string"
        format: "byte"
        description: "base64 encoded image data"
      url:
        type: "string"
        description: "URL of the image file, optional"
  Cinema:
    type: "object"
    required:
    - "name"
    - "latitude"
    - "longitude"
    - "address"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Kino Galaxie"
      address:
        type: "string"
        example: "Horní Dolní 12, 558 05 Liptákov"        
      latitude:
        type: "number"
        format: "float"
      longitude:
        type: "number"
        format: "float"
      openingHours:
        type: "string"
        example: "<b>Mo:</b> 10AM - 12PM<br /><b>Tue:</b> 10AM - 12PM<br />"
  Movie:
    type: "object"
    required:
      - "origName"
      - "genres"
      - "description"
    properties:
      id:
        type: "integer"
        format: "int64"
      localName:
        type: "string"
        description: "Localized movie name"
      origName:
        type: "string"
        description: "Original movie name"
      engName:
        type: "string"
        description: "Movie name localized to english"
      releaseDate:
        type: "integer"
        format: "int64"
        description: "Release date in UNIX Timestamp format. Hour, minute and seconds are zeros"
        example: "1491955200"
      releaseDateUS:
        type: "integer"
        format: "int64"
        description: "USA Release date in UNIX Timestamp format. Hour, minute and seconds are zeros"
        example: "1491955200"
      ratingCsfd:
        type: "integer"
        format: "int32"
        description: "ČSFD rating, percent"
      ratingImdb:
        type: "number"
        format: "float"
        description: "IMDb rating, one decimal place"
      posterThumbnail:
        type: "string"
        format: "byte"
        description: "base64 encoded image"
      posters:
        type: "array"
        items:
          type: "integer"
          format: "int64"
          description: "image identificator"
        example: [22232, 444551]
      genres:
        type: "array"
        items:
          type: "string"
        example: ["horror", "sci-fi"]
      description:
        type: "string"
      length:
        type: "integer"
        format: "int32"
        description: "movie length [minutes]"
  Projection:
    type: "object"
    description: "movie projection info"
    required:
      - "movie"
      - "time"
      - "lang"
    properties:
      id:
        type: "integer"
        format: "int64"
      movie:
        type: "integer"
        format: "int64"
        description: "movie identificator"
      time:
        type: "integer"
        format: "int64"
        description: "projection time in unix timestamp format"
      lang:
        type: "string"
        description: "movie language"
        example: "en"
      subtitles:
        type: "string"
        description: "subtitles language, can be empty"
        example: "cs"
      3d:
        type: "boolean"
        description: "true if movie is in 3D"
  User:
    type: "object"
    required:
      - "username"
      - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
  TrackingValue:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      value:
        type: "string"
      timestamp:
        type: "integer"
        format: "int64"
        example: "1494782679"
        description: "Unix timestamp"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://trionic.cz"